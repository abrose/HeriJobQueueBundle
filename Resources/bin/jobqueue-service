#!/bin/sh -e
### BEGIN INIT INFO
# Provides:          jobqueue-service
# Required-Start:    $local_fs $remote_fs $syslog
# Required-Stop:     $local_fs $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop jobqueue-service server
### END INIT INFO
#
# jobqueue-service init script for debian.
#
#
# Usage:
#
# Set the correct PROJECT_ROOT_DIR value, and copy this file to /etc/init.d
# Then use update-rc.d:
#
# Example:
#   cp jobqueue-service /etc/init.d/jobqueue-service
#   cd /etc/init.d && chmod 755 jobqueue-service
#   update-rc.d jobqueue-service defaults
#
# Removing the service:
#   update-rc.d -f jobqueue-service remove


. /lib/lsb/init-functions

NAME=jobqueue-service


# Replace with your project dir
PROJECT_ROOT_DIR=%project_root_dir%

PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

DAEMON="/usr/bin/php"
DAEMON_OPT="$PROJECT_ROOT_DIR/app/console jobqueue:listen"

#
#  Function that starts the daemon/service.
#
d_start() {
  start-stop-daemon --start --pidfile $PIDFILE --background --make-pidfile --exec $DAEMON $DAEMON_OPTS
}
#
#  Function that stops the daemon/service.
#
d_stop() {
  start-stop-daemon --stop --quiet --pidfile $PIDFILE
  rm -f $PIDFILE
}

#
#  Function that checks if jobqueue-service is running
#  Returns success (0) if avip is running, failure (1) if not running
#
d_status() {
  if [ -f "$PIDFILE" ] && ps `cat $PIDFILE` >/dev/null 2>&1; then
    return 0 # EXIT_SUCCESS
  else
    return 1 # EXIT_FAILURE
  fi
}

case "$1" in
  start)
  log_success_msg "Starting $NAME"
  if d_status; then
    log_warning_msg "$NAME is already running."
    return 1
  fi
  d_start
  if d_status; then
    log_success_msg "Done."
  else
    log_failure_msg "Failed to start jobqueue-service"
    exit 1
  fi
  ;;
  stop)
  log_success_msg "Stopping $NAME"
  if d_status; then
    d_stop
    if d_status; then
      log_failure_msg "$NAME is still running."
      exit 1
    else
      log_success_msg "done."
    fi
  else
    log_warning_msg "$NAME is not running."
  fi
  ;;
  status)
  if d_status; then
    log_success_msg "$NAME is running (PID: `cat $PIDFILE`)"
  else
    log_success_msg "$NAME is not running."
  fi
  ;;
  restart|force-reload)
  log_success_msg "Restarting $NAME"
  d_stop
  sleep 1
  d_start
  ;;
  *)
  log_success_msg "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
  exit 1
  ;;
esac

exit 0
